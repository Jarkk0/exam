Project work

Last update 13.12.2021

Introduction
Your task is to implement a system that lets users register, login and post new code snippets. Non-authenticated users can see all the content, but they cannot post, edit, or comment items. Data has to be saved to a database and usage of content management systems (CMS, e.g. WordPress or Drupal) is not allowed. Documentation has to be written. These basic features give 25 points from the project.

Besides the basic features you can implement as many additional features as you wish to gather more points and thus higher grades from the course.

The project is individual work.

If you have never seen https://stackoverflow.com/ before, you might want to check it to get some idea what to do :)

Mandatory requirements
Implementation of backend with Node.js
You can of course use Express, Meteor or any other additional framework
Java, PHP, Perl, Python, Ruby or other language solutions are not allowed in this course
Utilization of database
MongoDB, MariaDB or any other you see fit
Authentication
Users have to have an option to register and login
You can use JWT or session based authorization
Only authenticated users can post, comment (or vote)
Features
Authenticated users can:
Post new code snippets
Comment on existing posts
Non-authenticated users can see posts, comments (and vote counts)
There is some page listing all the post, after opening one post, comments are also listed
Responsive design
The app needs to be usable with mobile devices and desktop browsers
Use of Materialize or Bootstrap is recommended
Documentation
There needs to be documation describing the technology choices, installation guidelines and user manual
Also list the features you have implemented and the number of points you are aiming at


Possible features

Feature
Max points
Basic features with well written documentation
25
The application does not work
-100
No documentation
-100




Users can edit their own comments/posts
4
Utilization of a frontside framework, such as React, but you can also use Angular, Vue or some other
5
Use some highlight library for the code snippets, for example https://highlightjs.org/
2
Use of a pager when there is more than 10 posts available
2
Login with Facebook, Google or Twitter accounts (use Passport.js)
2
Admin account with rights to edit all the post and comments and delete content (if a post is removed, all its comments should be removed too)
3
Test software for accessibility; can it be used only with keyboard / voice command? Can screen readers work with your application?
3
Provide a search that can filter out only those messages that have the searched keyword
2
Vote (up or down) posts and comments (only one vote per user)
3
User profiles can have images which are show next to posts/comments
3
User can click username and see user profile page where name, register date, (user picture) and user bio is listed
2
Last edited timestamp is stored and shown with posts/comments
2




Create (unit) tests and automate some testing for example with https://www.cypress.io/ (at least 10 cases have to be implemented)
5








Inappropriate content, including hate speech related memes and other trash
-100
Code is not written and commented in English
-10
Code is not commented at all
-10
Code is not commented properly
-5




<Your own feature: describe why should it be accepted>
n


Notes
Front and backend do not need to be under the same project/port/whatever, but they can be different implementations
If more than 60k ports are used, your project will not be graded


Returning
Return a link via Moodle to the repository where your code lies.
